<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[bitmap]]></title>
    <url>%2F2017%2F10%2F31%2Fbitmap%2F</url>
    <content type="text"><![CDATA[bitmap问题设计多选题的选项问题,一道题有多个选项ABCD,可能有更多如何设计更有效存储识别? 分析选项只有选与不选的区别,而且总的个数固定,而且判定2个结果是否存在(答案是否正确),二进制完全满足条件. 结果单个选项12345A：1 1B: 1 &lt;&lt; 1 2C: 1 &lt;&lt; 2 4D: 1 &lt;&lt; 3 8... 组合选项123AB： 1|2BC: 2|4ABCD: 1|2|4|8 比较答案正确答案 ABC : 1|2|4 --&gt; 7 用户选择 AB : 1|2 --&gt; 3 运算 3!=7 &amp;&amp; 3|7=7 说明部分答对 用户选择 BD : 2|8 –&gt; 10 运算 10!=7 &amp;&amp; 10|7=!7 说明有错误选项 相关知识Java位运算(移位、位与、或、异或、非）]]></content>
  </entry>
  <entry>
    <title><![CDATA[InvalidClassException]]></title>
    <url>%2F2017%2F10%2F31%2Finvalidclasexception%2F</url>
    <content type="text"><![CDATA[InvalidClassException背景项目使用的SpringBoot架构,使用的是默认的Redis存储登陆信息 过程添加了一个有关于UsUser的接口,需要把当前登录信息返回给前端。 结果访问时InvalidClassException异常12org.springframework.data.redis.serializer.SerializationException: Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.InvalidClassException: com.usc.core.model.UsUser; local class incompatible: stream classdesc serialVersionUID = -4391106051528831723, local class serialVersionUID = -3047559744731102659 at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize(JdkSerializationRedisSerializer.java:82) 思考&amp;总结看到这个的第一反应是有人修改了serialVersionUID,然后发现这个类并没有这个字段.然后联想到这个信息是从redis获取的然后清理了redis中的登陆信息,异常不再出现.最后注意到这个org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize,已证明联想正确,出现问题到解决5分钟不到. 相关知识serialVersionUID适用于Java的序列化机制。简单来说，Java的序列化机制是通过判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是InvalidCastException。]]></content>
  </entry>
  <entry>
    <title><![CDATA[SpringCloud-config client不能连接server]]></title>
    <url>%2F2017%2F10%2F30%2Fspringcloud-config-client-canot-conect-to-server%2F</url>
    <content type="text"><![CDATA[错误详情 config clientjava代码1new SpringApplicationBuilder(Application.class).properties("spring.cloud.config.enabled:true").web(true).run(args); yml配置123456789spring: application: name: masque cloud: config: uri: http://localhost:8888 profile: dev label: final enabled: true 依赖12345678910111213141516&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 出现的问题官方示例中不需要配置 spring.cloud.config.enabled默认是true现在的情况是必须配置这两个enabled,否则client不会去找server 项目正常启动,没有任何异常 解决办法在对照了所有的java代码,翻阅了网上的一些博客发现,client多了一个依赖spring-cloud-config-server 去掉这个就正常了]]></content>
  </entry>
  <entry>
    <title><![CDATA[程序员]]></title>
    <url>%2F2017%2F10%2F22%2Fprogramer%2F</url>
    <content type="text"><![CDATA[&ensp;&ensp;&ensp;&ensp;公司最值钱的东西是产品，如果要问比产品更有价值的是什么？我认为是实实在在做事情的程序员们。 &ensp;&ensp;&ensp;&ensp;他们虽然工资不高，每天坐在位置上敲着代码，在很多人眼中被称为“屌丝”或“宅男”，但我认为恰恰就是这些人，他们才是公司最有价值的人。 &ensp;&ensp;&ensp;&ensp;他们有自己的理想，希望能够通过自己的努力，从中得到那一点点所谓的成就感。他们需要理解产品经理真正的意图，把想法变成现实，让产品真正落地。他们更容易把握细节，而这些细节往往决定着产品的命运与成败。他们突如其来的跳槽，对我们的项目的交付有直接的影响。他们在一起工作的气氛，能体现技术公司的文化与底蕴。由此看来，对程序员的重视是相当有必要的，我们需要关心每一位程序员的职业发展，让他们在团队里能够充分地发挥出自己的能力。 &ensp;&ensp;&ensp;&ensp;我们也需要对他们倍加关注，挖掘出有能力、肯吃苦、敢担当的人，给他们更多的机会，让他们成为技术领袖。 &ensp;&ensp;&ensp;&ensp;互联网技术公司需要大量这样的程序员： 他们是一群有着技术信仰的人，他们是一群热爱编程的人，他们是一群不解决问题睡不好觉的人。 他们不是打杂的，不是外包，更不是工具。 他们不喜欢被忽悠，不喜欢被冷落，更不喜欢被驱动。 他们需要尊重，需要培养，更需要激情！ 转载自 开源社区 黄勇的博客]]></content>
  </entry>
</search>
